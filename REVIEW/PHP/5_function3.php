<?php
// $arr=array(5,10,7,3,1);
// 키> 원소값으로 나타내기
// foreach
// $arr= array(5,10,7,3,1);
// foreach($arr as $key => $val)
// {
//     echo $key." > ".$val."\n";
// }

// for
// $arr= array(5,10,7,3,1);
// for($i=0;$i<count($arr);$i++)
// {
//     echo $i." > ".$arr[$i]."\n";
// }
//---------------------------------------------------------------------------------------------
//버블정렬
// $arr=array(5,10,7,3,1);
// 두개를 비교했을 때 더 큰걸 뒤로가게 해준다. 


// // 내림차순의 경우
// $arr= array(5,10,7,3,1);

//     for($j=1;$j<count($arr);$j++){
//         for($i=0;$i<$j;$i++){
//             // $j=0 일때는 안에 있는 $i<$j조건이 성립하지 않기 때문에 
//             //$j=1부터 시작해서 count($arr)보다 작을 때까지 $j가 1씩 증가
//             // $j=1 ; $i=0 일때 
//             if($arr[$i]<$arr[$i+1]){
//                 // $arr[0]<$arr[1]이 5<10 충족되므로
//                 $temp = $arr[$i];
//                 // 변수 temp = 5;
//                 $arr[$i]=$arr[$i+1];
//                 // $arr[0] = 10
//                 $arr[$i+1]=$temp;
//                 // $arr[1]= 5 가 되어 $arr[0]과 $arr[1]의 자리가 바뀌게 됨
//             }
//         }
//         // count($arr)=5 이므로 j는 4까지 올 수 있고 i는 3까지 올 수 있어서 $i+1해도 에러가 나지 않음 
//         // for문 반복하면 내림차순으로 정렬이됨
//     }

// print_r($arr); // [0]=>10, [1]=>7, [2]=>5, [3]=>3, [4]=>1;




//---------------------------------------------------------------------------------------------
// 오름차순
// 두 수를 비교 했을 때 작은게 왼쪽으로 와야함. 
// 내가 작성한 코드


// $arr= array(5,10,7,3,1);
// for($i=0;$i<count($arr);$i++){
//     for($j=0;$j<$i;$j++){
//         if($arr[$j]>$arr[$i]){
//             $temp=$arr[$j];
//             //$temp에 큰 수가 저장이 되고
//             $arr[$j]=$arr[$i];
//             // 큰 수는 뒤로 넘어가게되고 
//             $arr[$i]=$temp;
//             // 작은 수는 $temp가 됨
//         }
//     }// $i가 count($arr)보다 작을 때까지 반복
// }
// print_r($arr);    // 오름차순으로 정렬이 되지만 버블 정렬이 아님
//                         // for($i)이 반복될때 마다 배열의 첫번째부터 계속 반복해서 계산하기 때문에 


//---------------------------------------------------------------------------------------------
// $arr = array(5,10,7,3,1);
// // for($i=count($arr)-1;$i>0;$i--)
// // {
// //     // $i는 count($arr)-1에서 $i가 0보다 클 때까지 for($j)를 반복하고 1씩 감소한다
// //     //$i>=0 해도 되지만 어차피 $i=0일때 for($j)가 조건이 성립이 안되기 때문에 그냥 $i>0 적는게 좋음
// //     // $i가 감소하면 한번 반복할 때 마다 맨 뒤로 이동한 원소는 계산을 안하기 때문에
// //     // 불필요한 계산이 사라짐
// $i=count($arr)-1;
//     for($j=0;$j<$i;$j++)
//     {
//         //$j=0 부터 $i보다 작을 때까지 1씩 증가하면서 반복한다. 
//         if($arr[$j]>$arr[$j+1])
//         {
//             $temp=$arr[$j];
//             $arr[$j]= $arr[$j+1];
//             $arr[$j+1]=$temp;
//             // 앞에 있는 수가 크다면 앞에 있는 수와 뒤에 있는 수의 자리를 바꾼다.
//         }
//     }
// // }

// print_r($arr); //[0] => 1, [1] => 3, [2] => 5, [3] => 7, [4] => 10

// 배열 안에 최대 값, 최소값을 출력해주는 함수를 각각 구현해 주세요.
// 함수명은 "my_max","my_min"


//---------------------------------------------------------------------------------------------
// 최대값
// $arr = array(5,10,7,3,1);
// function my_max($arr){
//     $max=$arr[0];
//     // 처음에 $max값을 배열의 첫번째 원소 값으로 지정해준다. 
//     for($i=1;$i<count($arr);$i++){
//         if($max<$arr[$i]){
//             $max=$arr[$i];
//             // $max의 값이 $arr[$i]보다 작다면
//             // $max의 값을 $arr[$i]로 지정해준다. 
//         }
//     }
//     return $max;
// }
// echo my_max($arr)."\n";

//---------------------------------------------------------------------------------------------
// // 최소값
// $arr = array(5,10,7,3,1,0);
// function my_min($arr){
//     $min=$arr[0];
//     // 처음에 $min값을 배열의 첫번째 원소 값으로 지정해준다. 
//     for($i=1;$i<count($arr);$i++){
//         if($min>$arr[$i]){
//             $min=$arr[$i];
//             // $min의 값이 $arr[$i]보다 크다면
//             // $min의 값을 $arr[$i]로 지정해준다. 
//         }
//     }
//     return $min;
// }
// echo my_min($arr);

//---------------------------------------------------------------------------------------








?>